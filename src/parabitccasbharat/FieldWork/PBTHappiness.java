package parabitccasbharat.FieldWork;

import DB.ParabitDBC;
import Models.PBTHappinessQuestion;
import Models.PBTHouseHoldModel;
import java.awt.GridLayout;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class PBTHappiness extends javax.swing.JFrame{

    PBTHouseHoldModel personData;
    ParabitDBC db;
    List<QuestionCard> questionList = new ArrayList<>();
    public PBTHappiness(PBTHouseHoldModel personData) {
        initComponents();
        this.personData = personData;
        this.db = new ParabitDBC();
        /*for(int i=0;i<6;i++){
            QuestionCard q1 = new QuestionCard("How Are You");
            jPanel1.add(q1);
        }*/
        ((GridLayout)jPanel1.getLayout()).setColumns(1);
        ((GridLayout)jPanel1.getLayout()).setRows(questionList.size());
        checkEveryQuestion();
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(jPanel1);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for(int i=0;i<questionList.size();i++){
            String query = "INSERT INTO `happinessanswers` VALUES ( NULL , '" + personData.getHl_sno() + "', '" + personData.getHh_sno() + "', '" + questionList.get(i).happinessQuestion.getQuestionId() + "', '" + questionList.get(i).getResult() + "', NULL, NULL)";
            try {
                db.stm2.execute(query);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PBTHappiness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PBTHappiness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PBTHappiness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PBTHappiness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new PBTHappiness().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void checkEveryQuestion() {
        String query = "SELECT * FROM happiness_question";
        try {
            db.rs1 = db.stm.executeQuery(query);
            while(db.rs1.next()){
                String questionId = db.rs1.getString("sno");
                String question = db.rs1.getString("question");
                int minAge = db.rs1.getInt("min_age");
                int maxAge = db.rs1.getInt("max_age");
                PBTHappinessQuestion happinessQuestion = new PBTHappinessQuestion(questionId,question, minAge, maxAge);
                if(isValid(happinessQuestion)){
                    QuestionCard q1 = new QuestionCard(happinessQuestion);
                    questionList.add(q1);
                    jPanel1.add(q1);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private boolean isValid(PBTHappinessQuestion happinessQuestion) {
        return isAgeValid(happinessQuestion) && true;
    }

    private boolean isAgeValid(PBTHappinessQuestion happinessQuestion) {
        int age = Integer.parseInt(personData.getAge());
        return happinessQuestion.getMinAge() <= age && happinessQuestion.getMaxAge() >= age;
    }
}
