package parabitccasbharat.Utilities;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class PBTConverter<T> extends javax.swing.JDialog {
    
    /**
     * Constants For Conversion Unit
     */
    public static final int LENGTH = 1001;
    public static final int WEIGHT = 1002;
    public static final int AREA = 1003;
    String[] lengthList = {"mile", "kilometer", "yard", "meter", "centimeter", "foot", "inch", "millimeter"};
    String[] weightList = {"stone","pound","kilogram","gram","ounce","milligram"};
    //public static final int = 1004;
    
    //Instance Variables
    private int unitToConvert;
    private String toWhichUnit;
    private String ans;

    public String getAns() {
        return ans;
    }
    
    
    public PBTConverter(int unitToConvert,String toWhichUnit,T parent) {
        super((JDialog)parent,true);
        initComponents();
        this.unitToConvert = unitToConvert;
        this.toWhichUnit = toWhichUnit;
        initCombo();
        addListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fromUnit = new javax.swing.JTextField();
        toUnit = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("From :");

        jLabel2.setText("To :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fromUnit)
                            .addComponent(toUnit, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, 120, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fromUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(toUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jButton1)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(ans!=null && !ans.isEmpty()){
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(null, "Please Fill From:");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PBTConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PBTConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PBTConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PBTConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new PBTConverter(LENGTH,"kilometer").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fromUnit;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField toUnit;
    // End of variables declaration//GEN-END:variables

    private void initCombo() {
        switch(unitToConvert){
            case LENGTH:
                initWith(lengthList);
                break;
            case WEIGHT:
                initWith(weightList);
                break;
            case AREA:
                initWith(lengthList);
                break;
        }
    }

    private void initWith(String[] list) {
        DefaultComboBoxModel model1 = (DefaultComboBoxModel) jComboBox1.getModel();
        model1.removeAllElements();
        for(int i=0;i<list.length;i++){
            model1.addElement(list[i]);
        }
        DefaultComboBoxModel model2 = (DefaultComboBoxModel) jComboBox2.getModel();
        model2.removeAllElements();
        model2.addElement(toWhichUnit);
    }

    private void addListener() {
        fromUnit.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if(PBTTextWatchers.isNumerical(fromUnit.getText()) && !fromUnit.getText().isEmpty()){
                    String fromWhichUnit = (String)jComboBox1.getSelectedItem();
                    double value = Double.parseDouble(fromUnit.getText());
                    ans = "" + covertTheUnits(fromWhichUnit,toWhichUnit,value);
                    toUnit.setText(ans);
                } else {
                    ans = "";
                    toUnit.setText(ans);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if(PBTTextWatchers.isNumerical(fromUnit.getText()) && !fromUnit.getText().isEmpty()){
                    String fromWhichUnit = (String)jComboBox1.getSelectedItem();
                    double value = Double.parseDouble(fromUnit.getText());
                    ans = "" +covertTheUnits(fromWhichUnit,toWhichUnit,value);
                    toUnit.setText(ans);
                } else {
                    ans = "";
                    toUnit.setText(ans);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }
    
    private double covertTheUnits(String fromWhichUnit, String toWhichUnit, double value) {
        switch(unitToConvert){
            case LENGTH:
                return convertLength(fromWhichUnit,toWhichUnit,value);
            case WEIGHT:
                return convertWeight(fromWhichUnit,toWhichUnit,value);
            case AREA:
                return convertArea(fromWhichUnit,toWhichUnit,value);
        }
        return 0;
    }

    private double convertLength(String fromWhichUnit, String toWhichUnit, double value) {
        return value * getFactorForLength(fromWhichUnit + "_" + toWhichUnit);
    }

    private double convertWeight(String fromWhichUnit, String toWhichUnit, double value) {
        return value * getFactorForWeight(fromWhichUnit + "_" + toWhichUnit);
    }

    private double convertArea(String fromWhichUnit, String toWhichUnit, double value) {
        return value * getFactorForArea(fromWhichUnit + "_" + toWhichUnit);
    }

    private double getFactorForLength(String conversionUnits) {
        switch(conversionUnits){
            case "mile_mile" : return 1.0;
            case "mile_kilometer" : return 1.609;
            case "mile_yard" : return 1760.0;
            case "mile_meter" : return 1609.344;
            case "mile_centimeter" : return 160934.4;
            case "mile_foot" : return 5280.0;
            case "mile_inch" : return 63360.0;
            case "mile_millimeter" : return 1609000.0;
            case "kilometer_mile" : return 0.62137119224;
            case "kilometer_kilometer" : return 1.0;
            case "kilometer_yard" : return 1093.613;
            case "kilometer_meter" : return 1000.0;
            case "kilometer_centimeter" : return 100000.0;
            case "kilometer_foot" : return 3280.84;
            case "kilometer_inch" : return 39370.079;
            case "kilometer_millimeter" : return 1000000.0;
            case "yard_mile" : return 0.00056818182;
            case "yard_kilometer" : return 0.0009144;
            case "yard_yard" : return 1.0;
            case "yard_meter" : return 0.9144;
            case "yard_centimeter" : return 91.44;
            case "yard_foot" : return 3.0;
            case "yard_inch" : return 36.0;
            case "yard_millimeter" : return 914.4;
            case "meter_mile" : return 0.00062137119;
            case "meter_kilometer" : return 0.001;
            case "meter_yard" : return 1.094;
            case "meter_meter" : return 1.0;
            case "meter_centimeter" : return 100.0;
            case "meter_foot" : return 3.281;
            case "meter_inch" : return 39.37;
            case "meter_millimeter" : return 1000.0;
            case "centimeter_mile" : return 6.2137119e-06;
            case "centimeter_kilometer" : return 1e-05;
            case "centimeter_yard" : return 0.01093613298;
            case "centimeter_meter" : return 0.01;
            case "centimeter_centimeter" : return 1.0;
            case "centimeter_foot" : return 0.03280839895;
            case "centimeter_inch" : return 0.3937007874;
            case "centimeter_millimeter" : return 10.0;
            case "foot_mile" : return 0.00018939394;
            case "foot_kilometer" : return 0.0003048;
            case "foot_yard" : return 0.333333;      
            case "foot_meter" : return 0.3048;       
            case "foot_centimeter" : return 30.48;   
            case "foot_foot" : return 1.0;
            case "foot_inch" : return 12.0;
            case "foot_millimeter" : return 304.8;   
            case "inch_mile" : return 1.5782828e-05;
            case "inch_kilometer" : return 2.54e-05;
            case "inch_yard" : return 0.02777777778;
            case "inch_meter" : return 0.0254;      
            case "inch_centimeter" : return 2.54;   
            case "inch_foot" : return 0.0833333;    
            case "inch_inch" : return 1.0;
            case "inch_millimeter" : return 25.4;   
            case "millimeter_mile" : return 6.2137119e-07;
            case "millimeter_kilometer" : return 1e-06;   
            case "millimeter_yard" : return 0.0010936133; 
            case "millimeter_meter" : return 0.001;       
            case "millimeter_centimeter" : return 0.1;    
            case "millimeter_foot" : return 0.0032808399; 
            case "millimeter_inch" : return 0.03937007874;
            default : return 1.0;
        }
    }

    private double getFactorForWeight(String conversionUnits) {
        switch(conversionUnits){
            case "stone_stone" : return 1.0;
            case "stone_pound" : return 14.0;
            case "stone_kilogram" : return 6.35029318;
            case "stone_gram" : return 6350.29318;
            case "stone_ounce" : return 224.0;
            case "stone_milligram" : return 6350293.18;
            case "pound_stone" : return 0.07142857143;
            case "pound_pound" : return 1.0;
            case "pound_kilogram" : return 0.45359237;
            case "pound_gram" : return 453.59237;
            case "pound_ounce" : return 16.0;
            case "pound_milligram" : return 453592.37;
            case "kilogram_stone" : return 0.15747304442;
            case "kilogram_pound" : return 2.20462262;
            case "kilogram_kilogram" : return 1.0;
            case "kilogram_gram" : return 1000.0;
            case "kilogram_ounce" : return 35.2739619;
            case "kilogram_milligram" : return 1000000.0;
            case "gram_stone" : return 0.00015747304;
            case "gram_pound" : return 0.00220462262;
            case "gram_kilogram" : return 0.001;
            case "gram_gram" : return 1.0;
            case "gram_ounce" : return 0.03527396195;
            case "gram_milligram" : return 1000.0;
            case "ounce_stone" : return 0.00446428571;
            case "ounce_pound" : return 0.0625;
            case "ounce_kilogram" : return 0.02834952313;
            case "ounce_gram" : return 28.3495231;
            case "ounce_ounce" : return 1.0;
            case "ounce_milligram" : return 28349.5231;
            case "milligram_stone" : return 1.5747304e-07;
            case "milligram_pound" : return 2.2046226e-06;
            case "milligram_kilogram" : return 1e-06;
            case "milligram_gram" : return 0.001;
            case "milligram_ounce" : return 3.5273962e-05;
            default : return 1.0;
        }
    }

    private double getFactorForArea(String conversionUnits) {
        switch(conversionUnits){
            default : return 1;
        }
    }

}
