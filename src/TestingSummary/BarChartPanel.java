/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TestingSummary;

import DB.ParabitDBC;
import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author acer
 */
public class BarChartPanel extends javax.swing.JPanel {
    private static final ParabitDBC db = new ParabitDBC();
    private static final XYSeriesCollection dataset = new XYSeriesCollection();
    
    private String tableName;
    private String columnName;
    private Range range;

    public BarChartPanel(String tableName, String columnName, Range range) {
        this.tableName = tableName;
        this.columnName = columnName;
        this.range = range;
        initEverything();
    }

    private void initEverything() {
        initComponents();
        ChartPanel panel = new ChartPanel(getChart());
        add(panel,BorderLayout.CENTER);
        addValuesOfDB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private JFreeChart getChart() {
        JFreeChart chart = ChartFactory.createXYBarChart("Bar Chart", "Category",false,"score",dataset,PlotOrientation.VERTICAL,false,false,false);
//        chartplot = (PiePlot) chart.getPlot();
        return chart;
    }

    private void addValuesOfDB() {
        XYSeries series = new XYSeries("Shuvam");
        dataset.removeAllSeries();
        for(int i=range.getMinimun();i<range.getMaximum();i+=range.getRange()){
            int minRange = i,maxRange = i + range.getRange();
            String query = getQuery(minRange,maxRange);
            series.add(i,maxRange);
        }
        dataset.addSeries(series);
    }

    private String getQuery(int minRange, int maxRange) {
        return "SELECT ";
    }
    
    public static class Range{
        private int range;
        private int maximum;
        private int minimun;

        public Range(int range, int maximum, int minimun) {
            this.range = range;
            this.maximum = maximum;
            this.minimun = minimun;
        }

        public int getRange() {
            return range;
        }

        public int getMaximum() {
            return maximum;
        }

        public int getMinimun() {
            return minimun;
        }
        
    }   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
 
}
